Problem Statement

Sample Input 1:
4 4
0 1
0 3
1 2
2 3
Sample Output 1:
0 1 3 2
Explanation For Sample Input 1:

Starting from 0, it is connected to 1 and 3, which will be printed. Then comes 2, which was connected to 1. 
Sample Input 2:
4 3
0 1
0 3
1 3
Sample Output 2:
0 1 3 2
Explanation For Sample Input 2:



Starting from 0, it is connected to 1 and 3, which will be printed. The remaining node is 2, which will be printed at the end.


*******************************************************************************************************************************************************************

ans:

#include<unordered_map>
#include<queue>
#include<list>
#include<set>

void prepareADJList(unordered_map<int,set<int>>& adj,vector<pair<int, int>>& edges){
    for(int i=0;i<edges.size();i++){
        int u=edges[i].first;
        int v=edges[i].second;
        adj[u].insert(v);
        adj[v].insert(u);
    }
}

void bfssearch(unordered_map<int,set<int>>& adj,vector<int>& ans,unordered_map<int,bool>& visited,int node){
    queue<int> q;
    q.push(node);
    visited[node]=1;
    
    while(!q.empty()){
        int frontnode=q.front();
        q.pop();
        ans.push_back(frontnode);
        
        for(auto i:adj[frontnode]){
            if(!visited[i]){
                q.push(i);
                visited[i]=1;
            }
        }
    }
}

vector<int> BFS(int vertex, vector<pair<int, int>> edges)
{
    // Write your code here
    unordered_map<int,set<int>>adj;
    vector<int>ans;
    unordered_map<int,bool>visited;
    
    prepareADJList(adj,edges);
    for(int i=0;i<vertex;i++){
        if(!visited[i]){
        bfssearch(adj,ans,visited,i);
        }
    }
    return ans;
}



